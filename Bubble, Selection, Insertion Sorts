#Bubble Sort
#Compare two adjacent items, and if the first is bigger swap them

def bubblesort(A):
    for i in range (0, len(A) - 1):
        for j in range (0, len(A) - 1 - i):
            if A[j] > A[j + 1]:
                A[j], A[j + 1] = A[j + 1], A[j]
    return(A)


List = [4, 10, 5, 21, 56, 3, 6, 12, 11]
print(bubblesort(List))



#Insertion Sort
#checks keys one by one and compares them to the keys before them, if the selected key is bigger than the compared one, algorithm moves onto the next key.

def insertionsort(A):
    for i in range(1, len(A)):
        for j in range(i,0, -1 ):
            if A[j] < A[j-1]:
                A[j-1], A[j] = A[j], A[j-1]
    return(A)

List = [4, 10, 5, 21, 56, 3, 6, 12, 11]
%time print(insertionsort(List))



#Selection Sort
#find the smallest item and put it into the first position
#at first I tried doing this by recording the minimum number, but then I found out it was easier to record the index

def selectionsort(A):
    for i in range(0, len(A)-1):
        min = i
        for j in range(i+1, len(A)):
            if A[j] < A[min]:
                min = j
        if j != i:
            A[min], A[i] = A[i], A[min]
            #At the end of every main loop, this lines checks to see whether the min index has changed and if so it swaps the new smallest number to the i'th place
    return(A)

List = [4, 10, 5, 21, 56, 3, 6, 12, 11]
print(selectionsort(List))
